Activity 1: 
Task 1:- Write a program to add two number and log the result to console.
  Using + Operator
let num1 = 5;
let num2 = 5;
let sum = num1+num2;
console.log("sum :",sum);

Using function :- In this approach, we are adding two numbers using a function in JavaScript involves defining a custom function that takes two parameters, adds them, and returns the result.
  function additionFunction(a, b) {
    return a + b;
}
    let num1 = 5;
    let num2 = 10;
    let sum = additionFunction(num1, num2);
    console.log("Sum of given numbers is :", sum);

Using Arrow function:- Adding two numbers using an arrow function in JavaScript involves creating a concise function syntax that adds parameters and returns the sum.
  let addition = (a, b) => a + b;
  let num1 = 25;
  let num2 = 25;
  let sum = addition(num1, num2);
  console.log("Sum of given numbers is :", sum);

Task 2:- Write a program to sub two number and log the result to console.
Using the Negative Operator ( – ) in Console:- We can directly perform Subtraction operations in the console by using the “console.log()” statement by providing two operands that will print the exact difference value.
  let a = 10; 
  let b = 20; 
// Subtract directlty 
console.log(a - b); // -10 
console.log(b - a); // 10 

// Subtract by using another variable 
let c = b - a; 
console.log(c); // 10 

// Subtract without any variable 
console.log(10 - 20); //-10 
console.log(20 - 10); //10 
console.log(20 - 10 - 10); //0


Using User Defined Functions:-
  let a = 10;
  let b = 20; 
  // Funciton to subtract two variables 
function subtract(a, b) { 
	return a - b; 
} 
// For printing the result 
console.log("after subtraction : "	+ subtract(a, b));



Using Arrow Function:-
let a = 10; 
let b = 20; 
// Arrow funciton for subtraction of  two numbers 
let ans = (a, b) => a - b; 
// For printing the result in console 
console.log("after subtraction : " + ans(a, b));


TASK 3:-  Write a program to multiplie two number and log the result to console.

  Using “*” Operator:-In this approach we multiply two numbers in JavaScript involves using the * operator to perform arithmetic multiplication on numeric variables, resulting in their result.

let a = 10;  
let b = 10; 
let result = a * b; 
console.log("Result :", result); //100

Using Functions
Functions are the building blocks of some specific code that carry out specific tasks. Using the function, we can multiply two numbers by passing parameters, and the function will then return the result of the multiplication.

let a = 10; 
let b = 20; 
  // Funciton for multiplication of two numbers 
function multiply(a, b) { 
    return a * b; 
} 
  // For printing the result 
console.log("After multiplication : " + multiply(a, b));


Using Arrow function
In order to multiply two numbers, we create an arrow function, passing the values of the two numbers as parameters and returning the result of multiplication. We obtain the multiplied value by calling the arrow function and providing values for the parameter.


let a = 10; 
let b = 20; 
  
// Arrow funciton for multiplication of two numbers 
let result = (a, b) => a * b; 
// For printing the result in console 
console.log("After multiplication : " + result(a, b));


  Using Multiplication Assignment Operator
   When multiplying a variable by a specific amount and returning the result to the variable, the multiplication assignment operator *= is a useful shorthand. In JavaScript, it is a compound assignment operator.

let a = 20; 
a *= 10; 
  
// Printing the result 
console.log(a); // 10 
  
// Using another variable for mulitiplication 
let b = 2; 
a *= b; 
// Printing the result 
console.log(a); // 10
Output
200
400

  
Using for Loop:- We can multiply two numbers by using for loop. A function must first be initialized before multiplication calculations can be made using a for loop.


// Function for multiplication 
function multiply(a, b) { 
    let result = 0; 
    for (let i = 1; i <= b; i++) { 
        result += a; 
    } 
    return result; 
} 
  
// Calling function and storing the returned value 
let result = multiply(5, 10); // 50 
  
// Display the result 
console.log(result);


Task 4:-  Using Division / Operator
In this approach we divide two numbers in JavaScript involves using the / operator to perform arithmetic division on numeric variables, resulting in their division.

let a = 20;
let b = 10; 

// Divide directlty 
console.log(a/b); // 2
console.log(b/a); // 0.5

// Divide by using another variable
let c = a/b; 
console.log(c); // 2

// Divide without any variable
console.log(20/10); // 2
console.log(10/20); // 0.5

Using Functions:- In this approach we are creating a custom function and passing parameters to them, dividing those parametres and returning the result.

let x = 40;
let y = 20;

// Funciton for dividing the variable
function divide(x, y) {
  return x / y;
}
// For printing the result
console.log("After division : " + divide(x, y));

Using Arrow function:- We can make our custom Arrow function for division of numbers in which we can pass parameters and divide them accordingly and returns out the result of that division. It will work same as normal function but syntatically it differs from it.


let x = 40 ;
let y = 20 ; 

// Arrow funciton for division
let ans = (x,y) => x/y;

// For printing the result in console
console.log("After division : " +  ans(x,y));

Using Division Assignment Operator
This “/=” operator is used for division where we divide the variable’s value present in the left side to the value or variable present in the right side and that result get stored in left variable itself.

let x = 40;
x /= 10.0;

// Printing the result
console.log(x); // 4

Using Math.floor() for Integer Division
In JavaScript, you might sometimes want to perform integer division where you discard the fractional part of the division result. This can be done using the Math.floor() function, which rounds down the result to the nearest integer.

let a = 43;
let b = 10;

// Performing integer division
let result = Math.floor(a / b);

// For printing the result in console
console.log("Integer division result: " + result); // 4

Output
Integer division result: 4

ACTIVITY 2:-

Task 6:- Using Addition Assignment (+=) Operator:- In this approach we use Addition Assignment (+=) operator in which operator Sums up left and right operand values and then assigns the result to the left operand.
  let num1 = 15;
  let num2 = 10;
  // Equivalent to num1 = num1 + num2
  num1 += num2;
  console.log("Sum of the given number is :", num1);


Task 7:- Using the Subtract Assignment Operator:-
let a = 20; 
let b = 10; 

a -= b; 
console.log(a); // 10


Activity :-3
Task 8:- JavaScript that compares two numbers using the greater than (>) and less than (<) operators and logs the result to the console:
// Declare and initialize two variables
let number1 = 15;
let number2 = 20;

// Compare the numbers using > and < operators
if (number1 > number2) {
    console.log(number1 + " is greater than " + number2);
} else if (number1 < number2) {
    console.log(number1 + " is less than " + number2);
} else {
    console.log(number1 + " is equal to " + number2);
}


task 9:- JavaScript that compares two numbers using the greater than or equal to (>=) and less than or equal to (<=) operators and logs the result to the console:

// Declare and initialize two variables
let number1 = 15;
let number2 = 20;

// Compare the numbers using >= and <= operators
if (number1 >= number2) {
    if (number1 === number2) {
        console.log(number1 + " is equal to " + number2);
    } else {
        console.log(number1 + " is greater than or equal to " + number2);
    }
} else {
    console.log(number1 + " is less than or equal to " + number2);
}



Task 10:- JavaScript that compares two numbers using the equality (==) and strict equality (===) operators, logging the result to the console:
// Declare and initialize two variables
let number1 = 15;
let number2 = '15';

// Compare the numbers using == operator
if (number1 == number2) {
    console.log(number1 + " is equal to " + number2 + " using ==");
} else {
    console.log(number1 + " is not equal to " + number2 + " using ==");
}

// Compare the numbers using === operator
if (number1 === number2) {
    console.log(number1 + " is equal to " + number2 + " using ===");
} else {
    console.log(number1 + " is not equal to " + number2 + " using ===");
}





Activity 4:- LOgical operator
Task :- 11,12 => write a program that uses the && (logical AND) and || (logical OR) operators to combine two conditions and log the result to the console:

// Declare and initialize two variables
let number1 = 10;
let number2 = 20;

// Use the && operator to combine two conditions
if (number1 > 5 && number2 > 15) {
    console.log("Both conditions are true (number1 > 5 && number2 > 15).");
} else {
    console.log("One or both conditions are false (number1 > 5 && number2 > 15).");
}

// Use the || operator to combine two conditions
if (number1 < 5 || number2 > 15) {
    console.log("At least one condition is true (number1 < 5 || number2 > 15).");
} else {
    console.log("Both conditions are false (number1 < 5 || number2 > 15).");
}



 task:- 13     that uses the ! (logical NOT) operator to negate a condition and log the result to the console:
// Declare and initialize a variable
let isRaining = true;

// Use the ! operator to negate the condition
if (!isRaining) {
    console.log("It is not raining.");
} else {
    console.log("It is raining.");
}

// Another example with a number comparison
let number = 10;

// Check if the number is not greater than 5
if (!(number > 5)) {
    console.log("The number is not greater than 5.");
} else {
    console.log("The number is greater than 5.");
}


activity 5:- Ternary Operator 

task 14:-  uses the ternary operator to check if a number is positive or negative and logs the result to the console:

// Declare and initialize a variable with a number
let number = -10;

// Use the ternary operator to check if the number is positive or negative
let result = (number >= 0) ? "The number is positive." : "The number is negative.";

// Log the result to the console
console.log(result);
